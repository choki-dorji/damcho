// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Try this if default
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String
  userType      String
  image         String?
  hasCompletedSurvey Boolean  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  carePlans     CarePlan[]
  savedFaqs     SavedFaq[]
  surveys       Survey[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CarePlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  conditions  String[] // Stored as array of strings
  medications String[] // Stored as array of strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

model SavedFaq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Add an index for faster querying by user
}

model Survey {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String   @db.ObjectId
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName              String?
  lastName               String?
  email                  String
  dateOfBirth            DateTime?
  gender                 String?
  typeOfCancer           String?
  dateOfDiagnosis        DateTime?
  dateTreatmentEnded     DateTime?
  treatmentsReceived     String[]
  otherTreatments        String?
  physicalHealth         String?
  symptoms               String[]
  physicalActivity       String?
  physicalConcerns       String?
  emotionalWellbeing     String?
  emotionalSymptoms      String[]
  supportSystem          String?
  emotionalConcerns      String?
  diet                   String?
  sleepQuality           String?
  recoveryGoals          String[]
  additionalInfo         String?
  smokingStatus          String?
  alcoholUse             String?
  riskStratification     String?
  cardiovascularRisk     Boolean?
  fertilityConcern       Boolean?
  copingStyle            String?
  ptsdFlag               Boolean?
  cognitiveFunctionScore String?
  careCoordinationScore  Int?
  lifestyleChangeEffort  String?
  fearOfRecurrenceScore  Int?
  noSignificantIssues    Boolean?
  stress                 Boolean?
  lateEffectSymptoms     String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userId]) // âœ… allowed now that userId is a String
}